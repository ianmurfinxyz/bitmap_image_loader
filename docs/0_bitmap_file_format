--------------------------------------------------------------------------------
  DOC0 - BITMAP FILE FORMAT

  author: Ian Murfin - github.com/ianmurfinxyz
  date: Fri 8 Jan
--------------------------------------------------------------------------------

0 - CONTENTS

1 - Intro
2 - File Structure
3 - The File Header
4 - Info Header Versions
5 - The Possible Variations.
6 - Color Table Format
7 - Indexed Pixel Array Format
8 - RGBA Pixel Array Format
9 - References

--------------------------------------------------------------------------------

1 - INTRO

This document provides an overview of the bitmap image file format (.bmp file).

The purpose of my writing is to create an easier to follow document that makes
clearer the complexity arising within the format due to multiple versions of
file headers and mulitple optional parts of the format which creates a nightmare 
when attempting to create a loader which can handle all variations of bitmap 
files, or at least those most commonly encountered in the 'wild'.

I would recommend you also read the articles listed in the references section
prior to this document for a more complete overview as this document does not 
contain all details of the file format, only those that were relevant to my 
implementation of a bitmap file loader. Note that the loader I implemented does 
not handle any color space information or any ICC color profiles thus this doc 
does not discuss them. This doc is intended more as an addendum to the
references to discuss the 'wild' variations of the format.

--------------------------------------------------------------------------------

2 - FILE STRUCTURE

Bitmap files contain two headers at the top of the file: 1. the file header and 
2. the info (or DIB) header. The exact structure of a bitmap file varies 
depending on the version of the latter header (the info header) used and on 
format of the pixels in the file.

All bitmap files use the same version of the file header but can use any of the
9 different versions of the info header.

In practice it appears, from experimenting with GIMP (version 2.10.22), that 
different versions of the info header are used with different formats of pixel
data.

Further the version of GIMP used appears only to ouput 3 different versions of
the info header when exporting a bitmap image, leaving the other versions 
unused. I have not experimented with different programs such as photoshop which
apparantly use a different set of info header versions.

Reference [0] gives the general overview of the bitmap file structure shown in
figure 2.1. Refer to [0] for the full diagram, figure 2.1. is a simplified version.

  +-----------+----------+-----------+-----------+
  | structure | optional |   size    |  purpose  |
  |    name   |          |           |           |
  ================================================
  | file      | no       |  14 bytes | general   | 
  | header    |          |           | info      |
  +-----------+----------+-----------+-----------+
  | info      | no       | versions  | detailed  |
  | header    |          | differ in | info and  |
  |           |          | fixed     | pixel     |
  |           |          | size      | format    |
  +-----------+----------+-----------+-----------+
  | extra bit | yes      | 12 bytes  | used to   |
  | masks     |          |           | define    |
  |           |          |           | pixel     |
  |           |          |           | format    |
  +-----------+----------+-----------+-----------+
  | color     | yes      | variable  | mandatory |
  | table     |          | size      | for color |
  |           |          |           | depths <=8|
  +-----------+----------+-----------+-----------+
  | gap 1     | yes      | variable  | structure |
  | table     |          | size      | alignment |
  +-----------+----------+-----------+-----------+
  | pixel     | no       | variable  | the actual|
  | array     |          | size      | pixel data|
  +-----------+----------+-----------+-----------+
  | gap 2     | yes      | variable  | structure |
  | table     |          | size      | alignment |
  +-----------+----------+-----------+-----------+
  | ICC color | yes      | variable  | defines   |
  | profile   |          | size      | color     |
  |           |          |           | profiles  |
  |           |          |           | for color |
  |           |          |           | management|
  +-----------+----------+-----------+-----------+

  [figure 2.1. simplified general overview of bitmap file structure.]

--------------------------------------------------------------------------------

3 - THE FILE HEADER

The file header is super simple as it contains only 3 bits of actual data: 
    1. the file magic which identifies the file, 
    2. the total size of the file, and
    3. the offset into the file where the pixel array starts.

The file header structure is shown in figure 3.1.

  +---------+--------+------------------------------------------------+
  | offset  | size   | purpose                                        |
  | (dec)   |(bytes) |                                                |
  =====================================================================
  | 0       | 2      | file magic, 0x4247 in hex, which is 'BM' in    |
  |         |        | ASCII                                          |
  +---------+--------+------------------------------------------------+
  | 2       | 4      | total size of the file in bytes.               |
  +---------+--------+------------------------------------------------+
  | 6       | 2      | reserved (so unused)                           |
  +---------+--------+------------------------------------------------+
  | 8       | 2      | reserved (so unused)                           |
  +---------+--------+------------------------------------------------+
  | 10      | 4      | offset to the pixel array in the file          |
  +---------+--------+------------------------------------------------+

  [figure 3.1. Structure of the bitmap file header]

All values in the file are simply unsigned integers stored in little endian
format thus this header could be represented as a packed C struct as:

struct BitmapFileHeader
{
  uint16_t magic;
  uint32_t fileSize;
  uint16_t reserved[2];
  uint32_t pixelOffset;
};

--------------------------------------------------------------------------------

4 - INFO HEADER VERSIONS

The 9 versions of the info header are shown in figure 4.1.

  +---------+--------------------+---------------+
  | size    |     header name    |  written by   |
  | (bytes) |                    |               |
  +---------+--------------------+---------------+
  | 12      | BITMAPCOREHEADER   |               |
  |         | OS21XBITMAPHEADER  |               |
  +---------+--------------------+---------------+
  | 64      | OS22XBITMAPHEADER  |               |
  +---------+--------------------+---------------+
  | 16      | OS22XBITMAPHEADER  |               |
  +---------+--------------------+---------------+
  | 40      | BITMAPINFOHEADER   |               |
  +---------+--------------------+---------------+
  | 52      | BITMAPV2INFOHEADER | photoshop     |
  +---------+--------------------+---------------+
  | 56      | BITMAPV3INFOHEADER | photoshop     |
  +---------+--------------------+---------------+
  | 108     | BITMAPV4HEADER     |               |
  +---------+--------------------+---------------+
  | 124     | BITMAPV5HEADER     | gimp          |
  +---------+--------------------+---------------+

  [figure 4.1. All versions of the bitmap info header.]

In practice the os2 versions are used only for a rarely used OS so can be
ignored and the BITMAPCOREHEADER has been superseded by BITMAPINFOHEADER which
appears now to be used as a common base for backwards compatibility. Thus the 
BITMAPCOREHEADER will likely never be encountered either. Which leaves us with
those listed in figure 4.2.

  +---------+--------------------+---------------+
  | size    |     header name    |  written by   |
  | (bytes) |                    |               |
  +---------+--------------------+---------------+
  | 40      | BITMAPINFOHEADER   |               |
  +---------+--------------------+---------------+
  | 52      | BITMAPV2INFOHEADER | photoshop     |
  +---------+--------------------+---------------+
  | 56      | BITMAPV3INFOHEADER | photoshop     |
  +---------+--------------------+---------------+
  | 108     | BITMAPV4HEADER     |               |
  +---------+--------------------+---------------+
  | 124     | BITMAPV5HEADER     | gimp          |
  +---------+--------------------+---------------+

  [figure 4.2. The only info headers I care about.]

Thankfully this is not as bad as it seems as each version is simply an extension
of the last, hence the sizes increase, but the data each version contains does
not change from the last, it only expands.

Figure 4.3 shows the structure of the all different info header versions.

note: most all data in the header are unsigned integers with the exception of 
those explicitly stated otherwise.

  +---------+---------+--------+-----------------------------------------------+
  | file    | header  | size   | purpose                                       |
  | offset  | offset  |(bytes) |                                               |
  | (dec)   | (dec)   |(bytes) |                                               |
  ==============================================================================
            
  ******************************************************************************
  | since BITMAPINFOHEADER - 40 bytes                                          | 
  ******************************************************************************
  | 14      | 0       | 4      | The size of this header. This depends on the  |
  |         |         |        | header version and is used to id the version  | 
  |         |         |        | and thus what data is in the info header.     | 
  +---------+---------+--------+-----------------------------------------------+
  | 18      | 4       | 4      | the bitmap width in pixels (signed integer).  |
  +---------+---------+--------+-----------------------------------------------+
  | 22      | 8       | 4      | the bitmap height in pixels (signed integer). |
  +---------+---------+--------+-----------------------------------------------+
  | 26      | 12      | 2      | the number of color planes (always 1).        |
  +---------+---------+--------+-----------------------------------------------+
  | 28      | 14      | 2      | the number of bits per pixels, which is the   |
  |         |         |        | color depth of the image. Values can be 1, 4, | 
  |         |         |        | 8, 16, 24 and 32.                             | 
  +---------+---------+--------+-----------------------------------------------+
  | 30      | 16      | 4      | the compression method used on the pixel data.|
  +---------+---------+--------+-----------------------------------------------+
  | 34      | 20      | 4      | total image size in bytes. Different to the   |
  |         |         |        | file size as it includes on the pixel data.   | 
  +---------+---------+--------+-----------------------------------------------+
  | 38      | 24      | 4      | horizontal resolution of the image. Relevant  |
  |         |         |        | for printers I think.                         | 
  |         |         |        | (pixels per meter, signed integer)            | 
  +---------+---------+--------+-----------------------------------------------+
  | 42      | 28      | 4      | vertical resolution of the image.             |
  |         |         |        | (pixels per meter, signed integer)            | 
  +---------+---------+--------+-----------------------------------------------+
  | 46      | 32      | 4      | the number of colors in the color palette,    |
  |         |         |        | or 0 to default to 2^n, where n=bitsPerPixel. | 
  +---------+---------+--------+-----------------------------------------------+
  | 50      | 36      | 4      | the number of important colors used, or 0 when|
  |         |         |        | all colors are important; generally ignored.  | 
  +---------+---------+--------+-----------------------------------------------+

  ******************************************************************************
  | added BITMAPV2INFOHEADER - 52 bytes - 12 extra                             | 
  ******************************************************************************
  | 54      | 40      | 4      | red color channel mask.                       |
  +---------+---------+--------+-----------------------------------------------+
  | 58      | 44      | 4      | green color channel mask.                     |
  +---------+---------+--------+-----------------------------------------------+
  | 62      | 48      | 4      | blue color channel mask.                      |
  +---------+---------+--------+-----------------------------------------------+

  ******************************************************************************
  | added BITMAPV3INFOHEADER - 56 bytes - 4 extra                              | 
  ******************************************************************************
  | 66      | 52      | 4      | alpha color channel mask.                     |
  +---------+---------+--------+-----------------------------------------------+

  ******************************************************************************
  | added BITMAPV4HEADER - 108 bytes - 52 extra                                | 
  ******************************************************************************
  | 70      | 56      | 4      | color space magic, e.g. hex 0x73524742, which |
  |         |         |        | in ASCII is 'sRGB'.                           | 
  +---------+---------+--------+-----------------------------------------------+
  | 74      | 60      | 52     | lots of color space information such as gamma |
  |         |         |        | values and color space endpoints.             | 
  +---------+---------+--------+-----------------------------------------------+

  ******************************************************************************
  | added BITMAPV5HEADER - 124 bytes - 16 extra                                | 
  ******************************************************************************
  | 122     | 108     | 4      | data relating to ICC color profiles.          |
  +---------+---------+--------+-----------------------------------------------+

  [figure 4.3. Structure of bitmap info header versions.]

Note that I have glossed over a lot of the details of the later versions of the
info header and not included a more detailed listing of the data contained
within these headers. This is because I don't care about the extra data, and if
all you want to do is load a basic pixel array of RGBA colors then neither do
you.

The info header can be represented as a packed C struct as:

struct BitmapInfoHeader
{
  // -- BITMAPCOREHEADER --
  
  static constexpr int BITMAPCOREHEADER_SIZE_BYTES {12};
  
  uint32_t _headerSize_bytes;
  int32_t _bmpWidth_px;                    // note: signed integers
  int32_t _bmpHeight_px;
  uint16_t _numColorPlanes;
  uint16_t _bitsPerPixel; 

  // -- added BITMAPINFOHEADER --

  static constexpr int BITMAPINFOHEADER_SIZE_BYTES {40};

  uint32_t _compression; 
  uint32_t _rawImageSize_bytes;
  int32_t _horizontalResolution_pxPm;
  int32_t _verticalResolution_pxPm;
  uint32_t _numPaletteColors;
  uint32_t _numImportantColors;

  // -- added BITMAPV2INFOHEADER --

  static constexpr int BITMAPV2INFOHEADER_SIZE_BYTES {52};
  
  uint32_t _redMask;
  uint32_t _greenMask;
  uint32_t _blueMask;

  // -- added BITMAPV3INFOHEADER --
  
  static constexpr int BITMAPV3INFOHEADER_SIZE_BYTES {56};

  uint32_t _alphaMask;

  // -- added BITMAPV4HEADER --

  static constexpr int BITMAPV4HEADER_SIZE_BYTES {108};

  uint32_t _colorSpaceMagic;
  uint32_t _unused0[12];                 // gamma values and the like.

  // -- added BITMAPV5HEADER --
  
  static constexpr int BITMAPV5HEADER_SIZE_BYTES {124};

  uint32_t _unused1[4];                  // ICC color profile data.
};

--------------------------------------------------------------------------------

5 - THE POSSIBLE VARIATIONS

I have stated that bitmap files can contain different info headers and different
pixel formats and may or may not contain different optional regions, but what
variations of bitmap files are actually possible? The answer to this question 
was a real headache to figure out so I would like to make your (or a future 
version of myself) life easier by breaking it down.

There are effectively 2 main variations of bitmap file that depend on whether
your pixels are color indexed or use full colors. In GIMP (version 2.10.22) you
can set your pixel mode via Image>>mode>>rgb|indexed.

If you ignore the gaps in the file (which in practice you don't care about
anyway when loading a bitmap if you use absolute offsets into the file to find 
the different sections) then you can illustrate the 2 variations as shown in
figure 5.1.

note: I am also ignoring the ICC color profile data. This is at the end of the 
file, thus if it is present you can easily act like its not by just not reading
that far into the file.

    [ variation 1. for color indexed pixel data ]
  +-----------+----------+-----------+-----------+
  | structure | optional |   size    |  purpose  |
  |    name   |          |           |           |
  ================================================  The optional color table
  | file      | no       |  14 bytes | general   |  will exist since this
  | header    |          |           | info      |  contains the colors being
  +-----------+----------+-----------+-----------+  referenced by the indices
  | info      | no       | versions  | detailed  |  in the pixel array. In fact
  | header    |          | differ in | info and  |  it will be mandatory since
  |           |          | fixed     | pixel     |  all color indexed bitmaps   
  |           |          | size      | format    |  use color depths (bits per    
  +-----------+----------+-----------+-----------+  pixel) of 8 bits or less     
  | color     | yes      | variable  | mandatory |  and the standard states the
  | table     |          | size      | for color |  color table is mandatory for
  |           |          |           | depths <=8|  these bit depths.
  +-----------+----------+-----------+-----------+
  | pixel     | no       | variable  | the actual|  The pixel array will contain
  | array     |          | size      | pixel data|  indices rather than RGB     
  +-----------+----------+-----------+-----------+  color channel data.         

    [ variation 2. for full color pixel data ]
  +-----------+----------+-----------+-----------+
  | structure | optional |   size    |  purpose  |  The color table will likely  
  |    name   |          |           |           |  not be present. Some programs
  ================================================  may still output it however  
  | file      | no       |  14 bytes | general   |  but since the file header         
  | header    |          |           | info      |  contains the offset to the       
  +-----------+----------+-----------+-----------+  pixel array we can act like    
  | info      | no       | versions  | detailed  |  it is not.                         
  | header    |          | differ in | info and  | 
  |           |          | fixed     | pixel     |  The pixel data consists   
  |           |          | size      | format    |  of RGB and maybe also an
  +-----------+----------+-----------+-----------+  A (alpha) channel data.            
  | pixel     | no       | variable  | the actual|  
  | array     |          | size      | pixel data| 
  +-----------+----------+-----------+-----------+  

  [figure 5.1. The 2 main bitmap file format variations]

Variation 1 will mostly only occur for color depths of 8 or less since the
larger color depths of 16, 24 and 32 all use full color pixel data (i.e. RGBA 
color channel data). I say mostly since according to the microsoft standard
the color table may be present for the larger color depths for use with
optimization techniques on limited color displays. From my experiments GIMP
does not output a color table for the larger color depths.

Variation 1 will also most likely be encountered as using the BITMAPINFOHEADER
version of the info header since this header does not contain the color channel
masks which are not needed for color indexed bitmaps. Colors in the color table
are stored in a standardised format thus the masks are redundant. This is the
case with GIMP generated bitmaps. My experiments show that exporting a color
indexed bitmap with any bit depth (1, 4, or 8 (GIMP doesn't support 2)) results
in a bitmap using the BITMAPINFOHEADER version.

Variation 2 will be used for color depths of 16, 24, and 32, unless as already
discussed above that the program which generated the bitmap output a color table
for use with optimization techniques. Such a color table can be ignored for these
bitmaps however since the color data is stored within the pixel array as color
channel data not indices.

Variation 2 will also most likely be encountered with either BITMAPV3INFOHEADER
or BITMAPV5HEADER since these headers contain the color channel masks which
can be used at the larger color depths. I have found that GIMP will output this
variation with BITMAPV3INFOHEADER if you do not output color space info when
you export the bitmap, and with BITMAPV5HEADER if you do, since the latter
header has space for such color space data whereas the former does not.

There is a possible variation 3 shown in in figure 5.2 however in practice I
think this file will likely never be encountered.

    [ variation 3. for full color pixel data ]
  +-----------+----------+-----------+-----------+
  | structure | optional |   size    |  purpose  |  The color table will likely  
  |    name   |          |           |           |  not be present. Some programs
  ================================================  may still output it however  
  | file      | no       |  14 bytes | general   |  but since the file header         
  | header    |          |           | info      |  contains the offset the pixel       
  +-----------+----------+-----------+-----------+  array we can act like it is    
  | info      | no       | versions  | detailed  |  not.                         
  | header    |          | differ in | info and  | 
  |           |          | fixed     | pixel     |  The pixel data consists   
  |           |          | size      | format    |  of RGB and maybe also and 
  +-----------+----------+-----------+-----------+  A channel data.            
  | extra bit | yes      | 12 bytes  | used to   |
  | masks     |          |           | define    |
  |           |          |           | pixel     |
  |           |          |           | format    |
  +-----------+----------+-----------+-----------+  
  | pixel     | no       | variable  | the actual|  
  | array     |          | size      | pixel data| 
  +-----------+----------+-----------+-----------+  

  [figure 5.1. An unlikely variation]

This variation occurs only when the program that made the bitmap has decided to 
use the BITMAPINFOHEADER version of the info header with custom channel masks 
for the pixel array data. Since the BITMAPINFOHEADER does not contain the masks
within the header they have to be appended after the header. Note however that
these masks were added in the next version of the header (BITMAPV2INFOHEADER)
and thus it is most likely that modern programs that write channel masks will
just output a later info header version than BITMAPINFOHEADER. Thus this
variation will likely never be encountered, unless loading a really old bitmap
that was created before BITMAPV2INFOHEADER was standardised.

My tests with GIMP would suggest that GIMP will use the minimum sized version
of the info header it can get away with. Thus if exporting a bitmap which uses
indexed colors such that color masks are not needed, GIMP uses BITMAPINFOHEADER
in the generated bitmap. If exporting a bitmap with full color (16, 24 or 32
bits per pixel) but no color space data GIMP uses BITMAPV3INFOHEADER. It will
however use the V3 header whether your bitmap has an alpha channel or not, thus
if not using an alpha channel you do get a redundant alpha mask. Finally it uses
BITMAPV5HEADER only when you output color space data with a full color bitmap.

Further note that GIMP is setup in such a way that it is not possible to output
color space data if using an indexed color mode, the path to doing so does not
exist via the GIMP GUI.

--------------------------------------------------------------------------------
REFERENCES:

[0] https://en.wikipedia.org/wiki/BMP_file_format#Color_table

